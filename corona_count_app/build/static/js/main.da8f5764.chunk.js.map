{"version":3,"sources":["logo.svg","react-auth0-spa.js","components/LogoutButton.js","components/Home.js","Hooks/RetrieveProfileGoHome.js","components/Login.js","components/Measure.js","components/Bunker.js","components/StartPage.js","App.js","serviceWorker.js","utils/history.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","LogoutButton","isAuthenticated","logout","Typography","onClick","variant","color","Home","props","state","bunkers","user_obj","user_name","user_id","add_bunker_tab","join_bunker_error","create_bunker_form_text","join_bunker_form_text","redirect_bunker_id","users_for_target_bunker","past_users_for_target_bunker","bunker_to_leave","adding_bunker","theme","help","updating_username","update_username_text","update_username_error","handleItemClick","event","newValue","setState","handleLeaveBunkerClickOpen","bunker","handleLeaveBunkerClickClose","TabPanel","children","value","index","other","component","role","hidden","id","aria-labelledby","Box","p","__onCreateBunkerFormChange","__onJoinBunkerFormChange","__onAddBunkerClick","joinBunker","then","r","console","log","createNewBunker","__onUpdateUsernameFormChange","__onUpdateUsernameClick","updateUsername","addBunkerCard","TextField","autoFocus","margin","label","type","fullWidth","onChange","target","addBunkerModalHeader","addUsernameDialogHeader","renderEmptyBunkerListItem","List","Item","Icon","name","size","verticalAlign","Content","Header","Description","renderBunkerListItem","setRedirect","_id","genBunkerList","data","length","push","forEach","user","getUserData","url","config","bunkers_url","encodeURI","axios","get","users","past_users","sub","slice","users_url","response","loadedBunkers","this","postNewUser","toString","post","nickname","headers","catch","e","measures","access_code","bunker_id","delete","success","username","bunkerDataForDisplay","users_for_bunker","past_users_for_bunker","to","className","style","backgroundColor","backgroundSize","position","minHeight","minWidth","ThemeProvider","createMuiTheme","Grid","divided","Row","columns","Container","Menu","fixed","inverted","borderless","Dropdown","item","icon","simple","background","Dialog","open","onClose","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","header","as","Segment","Inline","AppBar","Tabs","aria-label","Tab","aria-controls","text","marginTop","vertical","relaxed","items","leaveBunker","Component","RetrieveProfileGoHome","loading","palette","primary","main","secondary","warning","Login","textAlign","height","Column","maxWidth","Image","src","Form","stacked","Input","fluid","iconPosition","placeholder","Message","Modal","trigger","href","closeIcon","content","Actions","Measure","raw_feed","lb_rows","ratings","measure_name","measure_id","measure_obj","go_back","user_being_rated_name_and_id","user_being_rated_comment","user_being_rated_delta","snackbar_open","endpoint","viewing_leaderboard","setGoBack","handleUserBeingRatedSelectorChange","handleSnackbarOpen","handleSnackbarClose","deltaSliderValueChange","buildFeed","feed","postEventCard","raw_feed_item","feedEventCard","__onSubmitDeltaClick","postDelta","_onCommentTextChange","_onVerifyDelta","post_id","verifyPost","Event","Extra","container","spacing","justify","alignItems","xs","select","helperText","defaultValue","map","option","MenuItem","key","gutterBottom","Slider","step","marks","min","max","valueLabelDisplay","Divider","all_users","concat","accuser","filter","entry","accuser_id","victim","victim_id","delta","is_verified","comment","initials","split","Label","Avatar","Summary","User","Card","CardContent","buildLeaderboard","getFeed","socket","socketIOClient","on","measures_url","Snackbar","anchorOrigin","horizontal","autoHideDuration","message","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","align","TableBody","row","hover","tabIndex","code","Bunker","create_measure_form_text","create_measure_default_score","bunker_name","go_to_measure","select_measure_name","select_measure_id","select_measure_obj","adding_measure","inviting_others","sorted_ratings","sort","a","b","score","leaderboard","i","rank","setGoToMeasure","__onCreateMeasureNameFormChange","__onAddMeasureClick","createNewMeasure","renderEmptyMeasureListItem","renderMeasureListItem","measure","lb","Paper","getMeasure","raised","CardActionArea","genMeasureList","getBunker","__completeStateInitialization","default_score","getMeasuresFromBunker","getUsersFromBunker","measureDataForDisplay","direction","StartPage","loginWithRedirect","fontSize","App","path","render","Redirect","Boolean","hostname","match","createBrowserHistory","ReactDOM","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","error","Provider","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","client_id","clientId","redirect_uri","targetUrl","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da8f5764.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n        console.log(appState)\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import {useAuth0} from \"../react-auth0-spa\";\nimport {Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst LogoutButton = () => {\n    const {isAuthenticated, logout} = useAuth0();\n    return (\n        <div>\n            {isAuthenticated && <Typography onClick={() => logout()}\n                                            variant={'button'}\n                                            color={'textPrimary'}\n            >Log out</Typography>}\n        </div>\n    );\n};\n\nexport default LogoutButton","import React from 'react'\n// eslint-disable-next-line\nimport {Container, Dropdown, Grid, List, Menu, Segment} from 'semantic-ui-react'\nimport LogoutButton from \"./LogoutButton\";\nimport axios from 'axios';\nimport config from '../url_config.json';\nimport Icon from \"semantic-ui-react/dist/commonjs/elements/Icon\";\nimport {Redirect} from \"react-router-dom\";\nimport {\n    AppBar,\n    Box,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Tab,\n    Tabs,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/styles\"\n\nclass Home extends React.Component {\n    state = {\n        bunkers: [],\n        user_obj: null,\n        user_name: null,\n        user_id: null,\n        add_bunker_tab: 0,\n        join_bunker_error: false,\n        create_bunker_form_text: \"\",\n        join_bunker_form_text: \"\",\n        redirect_bunker_id: \"\",\n        users_for_target_bunker: [],\n        past_users_for_target_bunker: [],\n        bunker_to_leave: null,\n        adding_bunker: false,\n        theme: this.props.theme,\n        help: false,\n        updating_username: false,\n        update_username_text: \"\",\n        update_username_error: false\n    };\n\n    constructor(props) {\n        super(props);\n        let user = this.props.user;\n        console.log(\"user\", user);\n        this.getUserData(user).then(r => console.log(\"User data retrieved\"))\n    }\n\n    async setRedirect(bunker) {\n        console.log(\"clicked on a bunker\", bunker);\n        // this.setState({\n        //     redirect_bunker_id: bunker._id\n        // })\n        let url = config.bunkers_url + \"/users/\" + bunker._id\n        url = encodeURI(url)\n        console.log('Get users from bunker url: ', url);\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                    console.log(\"Retrieved users from bunker: \", r.data.users)\n                    this.setState({\n                        users_for_target_bunker: r.data.users,\n                        past_users_for_target_bunker: r.data.past_users,\n                        redirect_bunker_id: bunker._id\n                    })\n                })\n        } catch (e) {\n            console.log(\"Failed getting users from bunker\", e)\n            return null\n        }\n    }\n\n    handleItemClick = (event, newValue) => {\n        this.setState({\n            add_bunker_tab: newValue,\n            create_bunker_form_text: \"\",\n            join_bunker_form_text: \"\"\n        })\n    };\n\n    handleLeaveBunkerClickOpen = (bunker) => {\n        this.setState({bunker_to_leave: bunker})\n    };\n\n    handleLeaveBunkerClickClose = () => {\n        this.setState({bunker_to_leave: null})\n    };\n\n    TabPanel = (props) => {\n        const {children, value, index, ...other} = props;\n\n        return (\n            <Typography\n                component=\"div\"\n                role=\"tabpanel\"\n                hidden={value !== index}\n                id={`add-bunker-tabpanel-${index}`}\n                aria-labelledby={`add-bunker-tab-${index}`}\n                {...other}\n            >\n                {value === index && <Box p={3}>{children}</Box>}\n            </Typography>\n        );\n    };\n\n\n    async getUserData(user) {\n        // Get user data from backend\n        let id = user.sub.slice(6)\n\n        let url = config.users_url + \"/\" + id\n        url = encodeURI(url)\n        console.log(\"Get user data url\", url);\n        try {\n            const response =\n                await axios.get(url)\n\n            let loadedBunkers = response.data.bunkers\n            this.setState({bunkers: loadedBunkers})\n        } catch (e) {\n            // If no data --> postNewUser --> bunker is empty\n            console.log(e);\n            this.postNewUser(user);\n        }\n\n        this.setState({user_name: user.name});\n        this.setState({user_id: id.toString()});\n        this.setState({user_obj: user})\n    }\n\n    async postNewUser(user) {\n        let url = config.users_url;\n        url = encodeURI(url);\n        let id = user.sub.slice(6);\n        console.log('Post new user url: ', url);\n        const response = await axios.post(\n            url,\n            {name: user.nickname.toString(), bunkers: [], user_id: id.toString()},\n            {headers: {'Content-Type': 'application/json'}}\n        ).catch(e => console.log(e.response.data));\n        console.log(\"Post new user response data\", response.data)\n    }\n\n    async createNewBunker(name) {\n        //TODO: Duplicate bunker names shouldn't exit\n        let url = config.bunkers_url\n        url = encodeURI(url)\n        console.log('Post new bunker url: ', url)\n        const response = await axios.post(\n            url,\n            {name: name.toString(), users: [this.state.user_id], measures: []},\n            {headers: {'Content-Type': 'application/json'}}\n        ).catch(e => console.log(e.response)).then(r => this.setRedirect(r.data.bunker))\n    }\n\n    async joinBunker(access_code) {\n        // Note access code = unique bunker id\n        let url = config.bunkers_url + \"/user/\" + access_code + \"/\" + this.state.user_id;\n        url = encodeURI(url);\n        console.log('Join bunker url: ', url);\n\n        try {\n            const response =\n                await axios.post(url).then(r => this.setRedirect(r.data.bunker));\n            console.log(\"Bunker data: \", response.data)\n        } catch (e) {\n            console.log(\"Bunker doesn't exist\", e.response);\n            this.setState({join_bunker_error: true})\n        }\n\n    }\n\n    async leaveBunker(bunker_id) {\n        let url = config.bunkers_url + \"/user/\" + bunker_id + \"/\" + this.state.user_id;\n        url = encodeURI(url);\n        console.log('Remove user from bunker: ', url);\n\n        try {\n            const response =\n                await axios.delete(url);\n            console.log(\"Successfully left Bunker: \", response.success);\n            this.setState({bunker_to_leave: null});\n            this.getUserData(this.props.user).then(r => console.log(\"User data retrieved\"))\n        } catch (e) {\n            console.log(\"Error leaving bunker: \", e.response)\n        }\n    }\n\n    async updateUsername(username) {\n        let url = config.users_url + \"/\" + this.state.user_id + \"/\" + this.state.update_username_text\n        url = encodeURI(url);\n        console.log('Update username url:', url);\n\n        try {\n            const response =\n                await axios.post(url);\n            console.log(\"Successfully updated username: \", response.success);\n            this.setState({update_username_text: \"\"});\n        } catch (e) {\n            console.log(\"Error updating username: \", e.response)\n        }\n    }\n\n    __onCreateBunkerFormChange = (value) => {\n        this.setState({create_bunker_form_text: value})\n    };\n\n    __onJoinBunkerFormChange = (value) => {\n        this.setState({join_bunker_form_text: value})\n    };\n\n    __onAddBunkerClick = () => {\n        if (this.state.add_bunker_tab === 0) {\n            if (this.state.join_bunker_form_text) {\n                this.joinBunker(this.state.join_bunker_form_text).then(r => console.log(\"Attempt join new bunker\", r))\n            }\n\n        } else {\n            if (this.state.create_bunker_form_text) {\n                this.createNewBunker(this.state.create_bunker_form_text).then(r => console.log(\"Attempt created new bunker\", r))\n            }\n        }\n    };\n\n    __onUpdateUsernameFormChange = (value) => {\n        this.setState({update_username_text: value});\n    };\n\n    __onUpdateUsernameClick = () => {\n        if (this.state.update_username_text) {\n            this.updateUsername(this.state.update_username_text).then(r => {\n                console.log(\"User name updated\")\n                this.setState({\n                    update_username_error: false,\n                    updating_username: false\n                });\n            });\n        } else {\n            this.setState({update_username_error: true});\n        }\n    };\n\n    addBunkerCard = () => {\n        if (this.state.add_bunker_tab === 0) {\n            return (\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    label=\"Bunker access code\"\n                    type=\"text\"\n                    fullWidth\n                    color={'secondary'}\n                    onChange={(event) => this.__onJoinBunkerFormChange(event.target.value)}\n                />\n            )\n        } else {\n            return (\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    label=\"New bunker name\"\n                    type=\"text\"\n                    fullWidth\n                    color={'secondary'}\n                    onChange={(event) => this.__onCreateBunkerFormChange(event.target.value)}\n                />\n            )\n        }\n    };\n\n    addBunkerModalHeader = () => {\n        if (!this.state.join_bunker_error) {\n            return (\n                <Typography><b>Time is of the essence... get to safety!</b></Typography>\n            )\n        } else {\n            return (\n                <Typography color={\"secondary\"}><b>Bunker join error! Either your access code is incorrect, or you've\n                    already been\n                    added to this bunker.</b></Typography>\n            )\n        }\n    };\n\n    addUsernameDialogHeader = () => {\n        if (!this.state.update_username_error) {\n            return (\n                <Typography><b>What is your name?</b></Typography>\n            )\n        } else {\n            return (\n                <Typography color={\"secondary\"}><b>Please provide a valid username!</b></Typography>\n            )\n        }\n    };\n\n    renderEmptyBunkerListItem = () => {\n        return (\n            <List.Item>\n                <List.Icon name='certificate' size='large' verticalAlign='middle'/>\n                <List.Content>\n                    <List.Header>You're in no bunkers!</List.Header>\n                    <List.Description>Get to safety</List.Description>\n                </List.Content>\n            </List.Item>\n        );\n    };\n\n    renderBunkerListItem = (bunker) => {\n        return (\n            <List.Item>\n                <List.Icon name='certificate' size='large' verticalAlign='middle'/>\n                <List.Content>\n                    <List.Header>\n                        <Typography component='a'\n                                    onClick={() => {\n                                        this.setRedirect(bunker)\n                                    }}\n                        >\n                            {bunker.name}\n                        </Typography>\n                    </List.Header>\n                    <List.Description>\n                        <Typography component='a'\n                                    variant={'caption'}\n                                    onClick={() => {\n                                        this.handleLeaveBunkerClickOpen(bunker._id)\n                                    }}\n                        >\n                            Leave Bunker\n                        </Typography>\n                    </List.Description>\n                </List.Content>\n            </List.Item>\n        );\n    };\n\n    genBunkerList = () => {\n        let data = [];\n        if (this.state.bunkers.length === 0) {\n            data.push(this.renderEmptyBunkerListItem())\n        } else {\n            this.state.bunkers.forEach(bunker => data.push(this.renderBunkerListItem(bunker)))\n        }\n\n        return data\n    };\n\n    render() {\n\n        let bunkerDataForDisplay = this.genBunkerList();\n\n        if (this.state.redirect_bunker_id !== \"\") {\n            let bunker_id = this.state.redirect_bunker_id;\n            let user_obj = this.state.user_obj;\n            let users_for_bunker = this.state.users_for_target_bunker;\n            let past_users_for_bunker = this.state.past_users_for_target_bunker;\n            let theme = this.state.theme;\n            return (\n                < Redirect to={{\n                    pathname: \"/bunker\",\n                    state: {\n                        user: user_obj,\n                        bunker_id: bunker_id,\n                        users_for_bunker: users_for_bunker,\n                        past_users_for_bunker: past_users_for_bunker,\n                        theme: theme\n                    }\n                }}/>\n            )\n\n        } else {\n            return (\n\n                <div className=\"full-height\" style={{\n                    backgroundColor: '#eb4d55 ',\n                    backgroundSize: \"cover\",\n                    position: 'absolute',\n                    minHeight: '100%',\n                    minWidth: '100%'\n                }}>\n                    <ThemeProvider theme={createMuiTheme(this.state.theme)}>\n                        <Grid divided='vertically'>\n                            <Grid.Row columns={1}>\n                                <Container>\n                                    <Menu fixed='top' inverted borderless>\n                                        <Container>\n                                            <Menu.Item position={\"left\"}>\n                                                <Dropdown item icon='align justify' simple>\n                                                    <Dropdown.Menu style={{background: '#5c5c5c'}}>\n                                                        <Dropdown.Item>\n                                                            <Typography\n                                                                onClick={() => this.setState({updating_username: true})}\n                                                                variant={'button'}\n                                                                color={'textPrimary'}\n                                                            >\n                                                                <Icon name={'pencil alternate'}/>Update name...\n                                                            </Typography>\n                                                        </Dropdown.Item>\n                                                        <Dropdown.Item>\n                                                            <div>\n                                                                <Typography onClick={() => this.setState({help: true})}\n                                                                            variant={'button'}\n                                                                            color={'textPrimary'}\n                                                                ><Icon name={'question'}/> Help</Typography>\n                                                            </div>\n                                                        </Dropdown.Item>\n                                                        <Dialog open={this.state.updating_username}\n                                                                onClose={() => this.setState({updating_username: false})}\n                                                                aria-labelledby={\"update-username-title\"}\n                                                                aria-describedby={'update-username-description'}\n                                                        >\n                                                            <DialogTitle\n                                                                id={'update-username-title'}>Update your name</DialogTitle>\n                                                            <DialogContent>\n                                                                <DialogContentText id={'update-username-description'}>\n                                                                    {this.addUsernameDialogHeader()}\n                                                                    Update the name that other survivors in your bunkers\n                                                                    will see for you.\n                                                                </DialogContentText>\n                                                                <TextField\n                                                                    autoFocus\n                                                                    margin={'dense'}\n                                                                    id={'new-username'}\n                                                                    label={'New User Name'}\n                                                                    type={'text'}\n                                                                    fullWidth\n                                                                    color={'secondary'}\n                                                                    onChange={(event) => this.__onUpdateUsernameFormChange(event.target.value)}\n                                                                />\n                                                            </DialogContent>\n                                                            <DialogActions>\n                                                                <Button\n                                                                    onClick={() => this.setState({updating_username: false})}>\n                                                                    Cancel\n                                                                </Button>\n                                                                <Button onClick={this.__onUpdateUsernameClick}>\n                                                                    Update\n                                                                </Button>\n                                                            </DialogActions>\n                                                        </Dialog>\n                                                        <Dropdown.Item>\n                                                            <LogoutButton/>\n                                                        </Dropdown.Item>\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n                                            </Menu.Item>\n                                            <Menu.Item header>\n                                                <Typography variant={'h4'}>\n                                                    Corona Count\n                                                </Typography>\n                                            </Menu.Item>\n                                            <Menu.Item as='a' position={\"right\"}\n                                                       onClick={() => this.setState({adding_bunker: true})}>\n                                                <Segment.Inline> <Icon name='add'/> Add Bunker...\n                                                </Segment.Inline>\n                                            </Menu.Item>\n                                            <Dialog open={this.state.adding_bunker}\n                                                    onClose={() => this.setState({adding_bunker: false})}\n                                                    aria-labelledby='add-bunker-title'\n                                                    aria-describedby='add-bunker-description'\n                                                    fullWidth\n                                            >\n                                                <DialogTitle id='add-bunker-title'>Add a new bunker</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText id='add-bunker-description'>\n                                                        {this.addBunkerModalHeader()}\n                                                        Create a bunker and invite your friends to stay safe and start\n                                                        slandering!\n                                                    </DialogContentText>\n                                                </DialogContent>\n                                                <AppBar position='static'>\n                                                    <Tabs value={this.state.add_bunker_tab}\n                                                          onChange={this.handleItemClick}\n                                                          aria-label=\"add-bunker-tabs\"\n                                                    >\n                                                        <Tab label={\"Join\"}\n                                                             id={'add-bunker-0'}\n                                                             aria-controls={'add-bunker-tabpanel-0'}/>\n                                                        <Tab label={\"Create\"}\n                                                             id={'add-bunker-1'}\n                                                             aria-controls={'add-bunker-tabpanel-1'}/>\n                                                    </Tabs>\n                                                </AppBar>\n                                                <this.TabPanel value={this.state.add_bunker_tab} index={0}>\n                                                    {this.addBunkerCard()}\n                                                </this.TabPanel>\n                                                <this.TabPanel value={this.state.add_bunker_tab} index={1}>\n                                                    {this.addBunkerCard()}\n                                                </this.TabPanel>\n                                                <DialogActions>\n                                                    <Button onClick={() => this.setState({adding_bunker: false})}>\n                                                        Cancel\n                                                    </Button>\n                                                    <Button onClick={this.__onAddBunkerClick}>\n                                                        Add\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                            <Dialog open={this.state.help}\n                                                    onClose={() => this.setState({help: false})}\n                                                    aria-labelledby='help-title'\n                                                    aria-describedby='help-description'\n                                                    fullWidth\n                                            >\n                                                <DialogTitle id='help-title'>Welcome to Corona Count</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText id='help-description'>\n                                                        <Typography>\n                                                            <b>Coronavirus... it's getting real!</b>\n                                                        </Typography>\n                                                        <br/>\n                                                        Corona count is a a way for you and your fellow quarantinees to\n                                                        stay sane (or not) and have some fun during this global\n                                                        pandemic. The game is simple. First create a bunker. Like the\n                                                        ones you're probably camping out in right now, a bunker is a\n                                                        virtual dugout for you, your friends, and your family. Once you\n                                                        create and enter a bunker, click on the button on the top right\n                                                        to add your friends. Just share the access code with your crew\n                                                        and they can join you in \"shelter.\"\n                                                        <br/>\n                                                        <br/>\n                                                        Is your Dad making too many bad jokes, friend coughing too\n                                                        loudly, or sister watching too much TikTok? This is where the\n                                                        measures come in. Create a measure such as \"Humor,\" \"Hygiene,\"\n                                                        to be able to dock your points or award them based on how they\n                                                        do with the criteria. Next, add some measures. Each measure has\n                                                        its own leaderboard so your whole bunker will know who's #1, and\n                                                        who needs to get their stuff together.\n                                                        <br/>\n                                                        <br/>\n                                                        Stay safe and social distance!\n                                                    </DialogContentText>\n                                                </DialogContent>\n                                                <DialogActions>\n                                                    <Button onClick={() => this.setState({help: false})}>\n                                                        Close\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </Container>\n                                    </Menu>\n                                </Container>\n                            </Grid.Row>\n\n                            <Grid.Row columns={1}>\n                                <Container text style={{marginTop: '50px'}}>\n                                    <Segment vertical>\n                                        <List divided inverted relaxed items={bunkerDataForDisplay}>\n                                        </List>\n                                    </Segment>\n                                </Container>\n                            </Grid.Row>\n                        </Grid>\n                        <Dialog\n                            open={this.state.bunker_to_leave != null}\n                            onClose={this.handleLeaveBunkerClickClose}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\"\n                        >\n                            <DialogTitle\n                                id='alert-dialog-title'>{\"Are you sure you want to leave this bunker?\"}</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id='alert-dialog-description'>\n                                    If you leave this bunker, your rankings in all its measures will be lost, and you\n                                    will\n                                    have to rejoin as a new member.\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={this.handleLeaveBunkerClickClose}>\n                                    Cancel\n                                </Button>\n                                <Button onClick={() => this.leaveBunker(this.state.bunker_to_leave)} autoFocus>\n                                    Leave Bunker\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </ThemeProvider>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Home","import {useAuth0} from \"../react-auth0-spa\";\nimport React from \"react\";\nimport Home from \"../components/Home\";\nimport {createMuiTheme} from \"@material-ui/core\";\n\nconst RetrieveProfileGoHome = () => {\n    const {loading, user} = useAuth0();\n    const theme = {\n        palette: {\n            primary: {\n                main: \"#333366\"\n            },\n            secondary: {\n                main: \"#ff9d76\"\n\n            },\n            warning: {\n                main: \"#eb4d55\"\n            },\n            type: 'dark'\n        }\n    };\n\n    if (loading || !user) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Home user={user} theme={theme}/>\n    )\n};\n\nexport default RetrieveProfileGoHome","import React from 'react'\nimport {Button, Form, Grid, Header, Image, Message, Segment, Icon, Modal, Text} from 'semantic-ui-react'\n\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <Grid textAlign='center' style={{height: '100vh'}} verticalAlign='middle'>\n                <Grid.Column style={{maxWidth: 450}}>\n                    <Header as='h2' color='#73031D' textAlign='center'>\n                        <Image src='../../icons/icon_1.png'/> Log-in to your account\n                    </Header>\n                    <Form size='large'>\n                        <Segment stacked>\n                            <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address'/>\n                            <Form.Input\n                                fluid\n                                icon='lock'\n                                iconPosition='left'\n                                placeholder='Password'\n                                type='password'\n                            />\n\n                            <Button color='teal' fluid size='large'>\n                                Login\n                            </Button>\n\n                        </Segment>\n                    </Form>\n                    <Message>\n                        <div className=\"ui red horizontal label\">New to us?</div>\n                        <Modal trigger={<a href='#'>Sign Up</a>} closeIcon>\n                            <Header icon='signup' content='Sign up for Corona Count'/>\n                            <Modal.Content>\n                                <Form size='large'>\n                                    <Segment stacked>\n                                        <Form.Input fluid icon='user' iconPosition='left' placeholder='name'/>\n                                        <Form.Input fluid icon='address card outline' iconPosition='left' placeholder='E-mail address'/>\n\n                                        <Form.Input\n                                            fluid\n                                            icon='lock'\n                                            iconPosition='left'\n                                            placeholder='Password'\n                                            type='password'\n                                        />\n\n                                        {/*<Button color='teal' fluid size='large'>*/}\n                                        {/*    Login*/}\n                                        {/*</Button>*/}\n\n                                    </Segment>\n                                </Form>\n                            </Modal.Content>\n                            <Modal.Actions>\n                                <Button color='red'>\n                                    <Icon name='remove'/> No\n                                </Button>\n                                <Button color='green'>\n                                    <Icon name='checkmark'/> Yes\n                                </Button>\n                            </Modal.Actions>\n                        </Modal>\n                    </Message>\n                </Grid.Column>\n            </Grid>\n        )\n    }\n}\n\n\nexport default Login","import React from \"react\";\nimport Feed from \"semantic-ui-react/dist/commonjs/views/Feed\";\nimport {Container, Divider, Dropdown, Grid as SUI_Grid, Menu, Segment} from \"semantic-ui-react\";\nimport LogoutButton from \"./LogoutButton\";\nimport Icon from \"semantic-ui-react/dist/commonjs/elements/Icon\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from '@material-ui/core/Slider';\nimport MUI_Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Bunker from './Bunker';\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport config from \"../url_config\";\nimport axios from \"axios\";\nimport socketIOClient from \"socket.io-client\";\nimport {\n    Button,\n    createMuiTheme,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow\n} from \"@material-ui/core\";\nimport {ThemeProvider} from '@material-ui/styles'\n\n\nclass Measure extends React.Component {\n    state = {\n        raw_feed: [],\n        lb_rows: [],\n        ratings: [],\n        user_obj: null,\n        measure_name: \"\",\n        measure_id: \"\",\n        measure_obj: null,\n        go_back: false,\n        bunker_id: null,\n        users: [],\n        past_users: [],\n        user_being_rated_name_and_id: null,\n        user_being_rated_comment: \"\",\n        user_being_rated_delta: 0,\n        snackbar_open: false,\n        endpoint: \"http://127.0.0.1:4000\",\n        viewing_leaderboard: false,\n        theme: this.props.theme\n    };\n\n    columns = [\n        {id: 'rank', label: 'Rank', minWidth: 170},\n        {id: 'name', label: 'Name', minWidth: 170},\n        {id: 'score', label: 'Score', minWidth: 170},\n\n    ];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user_obj: this.props.user_obj,\n            ratings: this.props.measure_obj.ratings,\n            measure_name: this.props.measure_name,\n            measure_id: this.props.measure_id,\n            measure_obj: this.props.measure_obj,\n            raw_feed: [],\n            lb_rows: this.props.buildLeaderboard(this.props.measure_obj.ratings, this.props.users_for_bunker),\n            go_back: false,\n            bunker_id: this.props.bunker_id,\n            users: this.props.users_for_bunker,\n            past_users: this.props.past_users_for_bunker,\n            user_being_rated_name_and_id: null,\n            user_being_rated_comment: \"\",\n            user_being_rated_delta: 0,\n            snackbar_open: false,\n            endpoint: \"http://127.0.0.1:4000\",\n            theme: this.props.theme\n        };\n\n        this.getFeed(this.state.measure_id).then()\n    }\n\n    componentDidMount() {\n        const endpoint = this.state.endpoint;\n        const socket = socketIOClient(endpoint);\n        socket.on(\"new_post\", data => {\n            this.setState({raw_feed: data})\n        });\n        socket.on(\"verified_post\", data => {\n            this.setState({\n                raw_feed: data.feed,\n                ratings: data.ratings,\n                lb_rows: this.props.buildLeaderboard(data.ratings, this.state.users)\n            });\n        });\n    }\n\n    setGoBack = () => {\n        this.setState({go_back: true})\n    };\n\n    handleUserBeingRatedSelectorChange = event => {\n        this.setState({user_being_rated_name_and_id: event.target.value});\n    };\n\n    handleSnackbarOpen = () => {\n        this.setState({snackbar_open: true})\n    };\n\n    handleSnackbarClose = () => {\n        this.setState({snackbar_open: false})\n    };\n\n    deltaSliderValueChange = (value) => {\n        this.setState({user_being_rated_delta: value.toString()})\n    };\n\n    buildFeed = () => {\n        let feed = [this.postEventCard()];\n        this.state.raw_feed.forEach(raw_feed_item => {\n            feed.push(this.feedEventCard(raw_feed_item))\n        });\n        return feed\n    };\n\n\n    // On click functions\n\n    __onSubmitDeltaClick = () => {\n        if (!this.state.user_being_rated_name_and_id || this.state.user_being_rated_name_and_id === {} || !this.state.user_being_rated_comment) {\n            // Tell them to add name breadcrums\n            this.handleSnackbarOpen()\n        } else {\n            // Post delta to backend\n            this.postDelta().then();\n            this.setState({\n                user_being_rated_name_and_id: null,\n                user_being_rated_comment: \"\",\n                user_being_rated_delta: 0\n            })\n        }\n    };\n\n    _onCommentTextChange = (event) => {\n        this.setState({user_being_rated_comment: event.target.value})\n    };\n\n    _onVerifyDelta = (post_id) => {\n        // this.state.raw_feed.filter((entry => entry._id === post_id))[0].is_verified = true\n        this.verifyPost(post_id).then()\n    };\n\n    // Back end async functions\n\n    async postDelta() {\n        let url = config.measures_url + \"/feed/\" + this.state.measure_id\n        url = encodeURI(url)\n        console.log('Post delta url: ', url)\n        try {\n            const response = await axios.post(\n                url,\n                {\n                    accuser_id: this.state.user_obj.sub.slice(6),\n                    victim_id: this.state.user_being_rated_name_and_id.user_id,\n                    delta: this.state.user_being_rated_delta,\n                    comment: this.state.user_being_rated_comment,\n                    is_verified: false\n                },\n                {headers: {'Content-Type': 'application/json'}}\n            ).then(r => console.log(\"Successfully posted delta\"))\n        } catch (e) {\n            console.log(\"Failed to post delta\", e.response)\n            return null\n        }\n    }\n\n    async getFeed() {\n        let url = config.measures_url + \"/feed/\" + this.state.measure_id\n        url = encodeURI(url)\n        console.log('Get feed url: ', url)\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                    console.log(\"Retrieved feed: \", r.data.feed)\n                    this.setState({raw_feed: r.data.feed})\n                })\n        } catch (e) {\n            console.log(\"Failed to retrieve feed\", e.response)\n            return null\n        }\n    }\n\n    async verifyPost(post_id) {\n        let url = config.measures_url + \"/verify/\" + this.state.measure_id + \"/\" + post_id\n        url = encodeURI(url)\n        console.log('Verify post url: ', url)\n        try {\n            const response = await axios.post(\n                url,\n                {},\n                {headers: {'Content-Type': 'application/json'}}\n            ).then(r => console.log(\"Successfully posted delta\"))\n        } catch (e) {\n            console.log(\"Failed to verify post\", e.response)\n            return null\n        }\n    }\n\n    // Component render functions\n\n    postEventCard = () => {\n        console.log(this.state.users);\n        return (\n            <Feed.Event>\n                <Feed.Content>\n                    <Feed.Extra>\n                        <MUI_Grid container spacing={5} style={{marginTop: '20px'}} justify={\"space-evenly\"}\n                                  alignItems={\"center\"}>\n                            <MUI_Grid item xs={2}>\n                                <TextField\n                                    id=\"outlined-select-user-native\"\n                                    select\n                                    label=\"User select\"\n                                    onChange={this.handleUserBeingRatedSelectorChange}\n                                    helperText=\"User being rated\"\n                                    variant=\"outlined\"\n                                    color={\"primary\"}\n                                    defaultValue={\"\"}\n                                    fullWidth={true}\n                                    value={this.state.user_being_rated_name_and_id == null ? \"\" : this.state.user_being_rated_name_and_id}\n                                >\n\n                                    {this.state.users.map(option => (\n                                        <MenuItem key={option.user_id} value={option}>\n                                            {option.name}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </MUI_Grid>\n                            <MUI_Grid item xs={2}>\n                                <TextField id=\"standard-basic\" label=\"Comments\"\n                                           value={this.state.user_being_rated_comment}\n                                           onChange={(event => this._onCommentTextChange(event))}\n                                           fullWidth={true}\n                                           color={\"primary\"}/>\n\n                            </MUI_Grid>\n                            <MUI_Grid item xs={4}>\n                                <Container>\n                                    <Typography id=\"discrete-slider-small-steps\" gutterBottom>\n                                        <Typography variant={'body'} color={'textPrimary'}>\n                                            Point delta: {this.state.user_being_rated_delta.toString()}\n                                        </Typography>\n                                    </Typography>\n                                    <Slider\n                                        defaultValue={0.0}\n                                        onChange={(event, value) => this.deltaSliderValueChange(value)}\n                                        aria-labelledby=\"discrete-slider-small-steps\"\n                                        step={1.0}\n                                        marks\n                                        color={\"primary\"}\n                                        min={-10.0}\n                                        max={10.0}\n                                        valueLabelDisplay=\"auto\"\n                                        value={this.state.user_being_rated_delta}\n                                    />\n                                </Container>\n                            </MUI_Grid>\n                            <MUI_Grid item xs={2}>\n                                <Button variant='contained' size={'large'} color={'primary'} onClick={this.__onSubmitDeltaClick}>Submit</Button>\n                            </MUI_Grid>\n                        </MUI_Grid>\n                        <Divider/>\n                    </Feed.Extra>\n                </Feed.Content>\n            </Feed.Event>\n        )\n    };\n\n    feedEventCard = (raw_feed_item) => {\n        let post_id = raw_feed_item._id;\n        const all_users = this.state.users.concat(this.state.past_users);\n        let accuser = all_users.filter(entry => entry.user_id === raw_feed_item.accuser_id)[0].name;\n        let victim = all_users.filter(entry => entry.user_id === raw_feed_item.victim_id)[0].name;\n        let delta = raw_feed_item.delta;\n        let is_verified = raw_feed_item.is_verified || this.state.user_obj.nickname === accuser ? <div></div> :\n            <Button variant='contained' color={\"primary\"} onClick={() => this._onVerifyDelta(post_id)}>Verify</Button>;\n        let comment = raw_feed_item.comment;\n        let initials = null;\n        try {\n            initials = accuser.split(\" \")[0][0]\n        } catch {\n            initials = \" \"\n        }\n        return (<Feed.Event>\n                <Feed.Label>\n                    <Avatar>{initials}</Avatar>\n                </Feed.Label>\n                <Feed.Content>\n                    <Feed.Summary>\n                        <Feed.User style={{color: 'white'}}>\n                            <Typography variant={\"h5\"}>\n                                {accuser}\n                            </Typography>\n                        </Feed.User>\n                    </Feed.Summary>\n\n                    <Feed.Extra>\n                        <MUI_Grid container spacing={5} style={{marginTop: '20px'}} justify={\"space-between\"}\n                                  alignItems={\"flex-start\"}>\n                            <MUI_Grid item xs={2}>\n                                <Card>\n                                    <CardContent>\n                                        <Typography color=\"textSecondary\" gutterBottom>\n                                            {victim} receives\n                                        </Typography>\n                                        <Typography variant=\"h5\" component=\"h2\">\n                                            {delta}\n                                        </Typography>\n                                        <Typography color=\"textSecondary\" gutterBottom>\n                                        </Typography>\n                                    </CardContent>\n                                </Card>\n                            </MUI_Grid>\n\n                            <MUI_Grid item xs={7}>\n                                <p style={{color: 'white'}}>\n                                    {comment}\n                                </p>\n                            </MUI_Grid>\n\n                            <MUI_Grid item xs={2}>\n                                {is_verified}\n                            </MUI_Grid>\n                        </MUI_Grid>\n                        <Divider/>\n                    </Feed.Extra>\n                </Feed.Content>\n            </Feed.Event>\n        )\n    }\n\n    render() {\n        if (this.state.go_back) {\n            return (\n                <Bunker bunker_id={this.state.bunker_id}\n                        user_obj={this.state.user_obj}\n                        users_for_bunker={this.state.users}\n                        theme={this.props.theme}/>\n            )\n        } else {\n            return (\n                <div className=\"full-height\" style={{\n                    backgroundColor: '#eb4d55 ',\n                    backgroundSize: \"cover\",\n                    position: 'absolute',\n                    minHeight: '100%',\n                    minWidth: '100%'\n                }}>\n                    <Snackbar\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        open={this.state.snackbar_open}\n                        autoHideDuration={6000}\n                        onClose={this.handleSnackbarClose}\n                        message=\"Please add a name and comments to submit a delta\"\n                    />\n                    <ThemeProvider theme={createMuiTheme(this.state.theme)}>\n                        <SUI_Grid divided='vertically'>\n                            <SUI_Grid.Row columns={1}>\n                                <Container>\n                                    <Menu fixed='top' color={'#581845'} inverted borderless>\n                                        <Container>\n                                            <Menu.Item position={\"left\"}>\n                                                <Dropdown item icon='arrow circle left' simple>\n                                                    <Dropdown.Menu style={{background: \"#5c5c5c\"}}>\n                                                        <Dropdown.Item>\n                                                            <Typography onClick={this.setGoBack}\n                                                                        variant={'button'}\n                                                                        color={'textPrimary'}\n                                                            >\n                                                                Back to bunker\n                                                            </Typography>\n                                                        </Dropdown.Item>\n                                                        <Dropdown.Item>\n                                                            <LogoutButton/>\n                                                        </Dropdown.Item>\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n                                            </Menu.Item>\n                                            <Menu.Item header>\n                                                <Typography variant={'h4'}>\n                                                    {this.state.measure_name}\n                                                </Typography>\n                                            </Menu.Item>\n                                            <Menu.Item as='a'\n                                                       header position={\"right\"}\n                                                       onClick={() => this.setState({viewing_leaderboard: true})}>\n                                                <Segment.Inline> <Icon name='trophy'/> Leaderboard\n                                                </Segment.Inline>\n                                            </Menu.Item>\n\n                                            <Dialog open={this.state.viewing_leaderboard}\n                                                    onClose={() => this.setState({viewing_leaderboard: false})}\n                                                    aria-labelledby='leaderboard-title'\n                                                    aria-describedby='leaderboard-description'\n                                            >\n                                                <DialogTitle id='leaderboard-title'>Leaderboard</DialogTitle>\n                                                <DialogContent>\n                                                    <DialogContentText id='leaderboard-description'>\n                                                        See how the survivors in your bunker compare\n                                                        in {this.state.measure_name}\n                                                    </DialogContentText>\n                                                </DialogContent>\n                                                <TableContainer>\n                                                    <Table stickyHeader aria-label=\"sticky table\">\n                                                        <TableHead>\n                                                            <TableRow>\n                                                                {this.columns.map(column => (\n                                                                    <TableCell\n                                                                        key={column.id}\n                                                                        align={column.align}\n                                                                        style={{minWidth: column.minWidth}}\n                                                                    >\n                                                                        {column.label}\n                                                                    </TableCell>\n                                                                ))}\n                                                            </TableRow>\n                                                        </TableHead>\n                                                        <TableBody>\n                                                            {this.state.lb_rows.map(row => {\n                                                                return (\n                                                                    <TableRow hover role=\"checkbox\" tabIndex={-1}\n                                                                              key={row.code}>\n                                                                        {this.columns.map(column => {\n                                                                            const value = row[column.id];\n                                                                            return (\n                                                                                <TableCell key={column.id}\n                                                                                           align={column.align}>\n                                                                                    {value}\n                                                                                </TableCell>\n                                                                            );\n                                                                        })}\n                                                                    </TableRow>\n                                                                );\n                                                            })}\n                                                        </TableBody>\n                                                    </Table>\n                                                </TableContainer>\n                                                <DialogActions>\n                                                    <Button onClick={() => this.setState({viewing_leaderboard: false})}>\n                                                        Done\n                                                    </Button>\n                                                </DialogActions>\n                                            </Dialog>\n                                        </Container>\n                                    </Menu>\n                                </Container>\n                            </SUI_Grid.Row>\n                            <SUI_Grid.Row columns={1}>\n                                <Container>\n                                    <Feed style={{marginTop: '55px'}}>\n                                        {this.buildFeed().map(value => value)}\n                                    </Feed>\n                                </Container>\n\n                            </SUI_Grid.Row>\n                        </SUI_Grid>\n                    </ThemeProvider>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Measure","import React from 'react'\n// eslint-disable-next-line\nimport {Container, Dropdown, Form, Grid as SUI_Grid, Header, List, Menu} from 'semantic-ui-react'\nimport LogoutButton from \"./LogoutButton\";\nimport axios from 'axios';\nimport config from '../url_config.json';\nimport Icon from \"semantic-ui-react/dist/commonjs/elements/Icon\";\nimport {Redirect} from \"react-router-dom\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Typography from \"@material-ui/core/Typography\";\nimport MUI_Grid from '@material-ui/core/Grid';\nimport Measure from './Measure';\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n    createMuiTheme,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField\n} from \"@material-ui/core\";\nimport {ThemeProvider} from \"@material-ui/styles\"\n\nclass Bunker extends React.Component {\n    state = {\n        measures: [],\n        bunker: {},\n        user_obj: null,\n        create_measure_form_text: null,\n        create_measure_default_score: 0,\n        bunker_name: \"\",\n        go_back: false,\n        go_to_measure: false,\n        select_measure_name: null,\n        select_measure_id: null,\n        select_measure_obj: null,\n        users_for_bunker: null,\n        past_users_for_bunker: null,\n        adding_measure: false,\n        inviting_others: false,\n        theme: this.props.theme ? this.props.theme : this.props.location.state.theme\n    };\n\n    constructor(props) {\n        super(props);\n        // Set user upon return\n        let bunker_id;\n        try {\n            bunker_id = this.props.location.state.bunker_id\n        } catch (e) {   // Transition coming from a measure\n            bunker_id = this.props.bunker_id\n        }\n        this.getBunker(bunker_id).then(r => this.__completeStateInitialization())\n    }\n\n    buildLeaderboard = (ratings, users) => {\n        let sorted_ratings = ratings;\n        sorted_ratings.sort((a, b) => (a.score > b.score) ? -1 : 1);\n        let leaderboard = [];\n        for (let i = 0; i < sorted_ratings.length; i++) {\n            const users_object = users.filter(entry => entry.user_id === sorted_ratings[i].user)[0];\n            if (users_object) {\n                const name = users.filter(entry => entry.user_id === sorted_ratings[i].user)[0].name;\n                const rank = i + 1;\n                const score = sorted_ratings[i].score;\n                leaderboard.push({rank, name, score})\n            }\n        }\n        return leaderboard\n    };\n\n    // Page change prep functions\n    setGoBack = () => {\n        this.setState({go_back: true})\n    };\n\n    setGoToMeasure = (measure_obj) => {\n        console.log(\"Go to measure:\", measure_obj);\n        this.setState({\n            select_measure_name: measure_obj.name,\n            select_measure_id: measure_obj._id,\n            select_measure_obj: measure_obj,\n            go_to_measure: true\n        });\n    };\n\n    // Back end call functions\n\n    async createNewMeasure(name, default_score) {\n        //TODO: Duplicate measure names shouldn't exit\n        let url = config.bunkers_url + \"/measure/\" + this.state.bunker._id + \"/\" + name + \"/\" + default_score\n        url = encodeURI(url)\n        console.log('Post new measure url: ', url);\n        try {\n            const response = await axios.post(\n                url,\n                {},\n                {headers: {'Content-Type': 'application/json'}}\n            ).then(e => this.setGoToMeasure(e.data.measure))\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    async getBunker(bunker_id) {\n        let url = config.bunkers_url + \"/\" + bunker_id\n        url = encodeURI(url)\n        console.log('Get bunker url: ', url)\n\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                    this.setState({bunker: r.data.bunker})\n                    this.getMeasuresFromBunker(r.data.bunker._id)\n                    console.log(\"Retrieved bunker data: \", r.data.bunker)\n                })\n        } catch (e) {\n            console.log(\"Bunker doesn't exist\", e)\n            return null\n        }\n    }\n\n    async getMeasuresFromBunker(bunker_id) {\n        let url = config.bunkers_url + \"/measures/\" + bunker_id\n        url = encodeURI(url)\n        console.log('Get measures from bunker url: ', url)\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                        this.setState({measures: r.data.measures})\n                        this.getUsersFromBunker(bunker_id)\n                    }\n                )\n            console.log(\"Retrieved bunker's measures\")\n        } catch (e) {\n            console.log(\"Couldn't get bunker's measures\", e)\n            return null\n        }\n\n    }\n\n    async getMeasure(measure_id) {\n        let url = config.measures_url + \"/\" + measure_id;\n        url = encodeURI(url);\n        console.log('Get measure url: ', url);\n\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                    console.log(\"Retrieved measure data: \", r.data.measure)\n                    this.setGoToMeasure(r.data.measure)\n                })\n        } catch (e) {\n            console.log(\"Measure doesn't exist\", e)\n            return null\n        }\n    }\n\n    async getUsersFromBunker(bunker_id) {\n        let url = config.bunkers_url + \"/users/\" + bunker_id\n        url = encodeURI(url)\n        console.log('Get users from bunker url: ', url)\n        try {\n            const response =\n                await axios.get(url).then(r => {\n                    console.log(\"Retrieved users from bunker: \", r.data.users);\n                    this.setState({\n                        users_for_bunker: r.data.users,\n                        past_users_for_bunker: r.data.past_users\n                    });\n                })\n        } catch (e) {\n            console.log(\"Failed getting users from bunker\", e);\n            return null\n        }\n    }\n\n    __completeStateInitialization() {\n        // Set active user obj\n        try {\n            this.setState({user_obj: this.props.location.state.user})\n        } catch (e) {   // Transitioning from a measure\n            this.setState({user_obj: this.props.user_obj})\n        }\n\n        // Set bunker users\n        try {\n            this.setState({\n                users_for_bunker: this.props.location.state.users_for_bunker,\n                past_users_for_bunker: this.props.past_users_for_bunker\n            })\n        } catch (e) { // Transitioning from a measure\n            this.setState({\n                users_for_bunker: this.props.users_for_bunker,\n                past_users_for_bunker: this.props.past_users_for_bunker\n            })\n        }\n        this.setState({bunker_name: this.state.bunker.name});\n\n        console.log(\"User object: \", this.state.user_obj)\n    }\n\n    // On click/change functions\n\n    __onCreateMeasureNameFormChange = (value) => {\n        this.setState({create_measure_form_text: value})\n    };\n\n    __onAddMeasureClick = () => {\n        this.createNewMeasure(this.state.create_measure_form_text, this.state.create_measure_default_score).then(r => console.log(\"Measure created\"))\n    };\n\n    // Render functions\n\n    renderEmptyMeasureListItem = () => {\n        return (\n            <List.Item>\n                <List.Icon name='bug' size='large' verticalAlign='middle'/>\n                <List.Content>\n                    <List.Header as='a'>You're in no measures!</List.Header>\n                    <List.Description as='a'>...boringgggg...</List.Description>\n                </List.Content>\n            </List.Item>\n        );\n    };\n\n    renderMeasureListItem = (measure) => {\n        let lb = this.buildLeaderboard(measure.ratings, this.state.users_for_bunker)\n        return (\n            <Paper color={\"grey\"}>\n                <Card onClick={() => this.getMeasure(measure._id)} id={measure._id} raised>\n                    <CardActionArea>\n                        <CardContent>\n                            <Typography variant=\"h5\" component=\"h2\">\n                                {measure.name}\n                            </Typography>\n                            <Typography color=\"textSecondary\" gutterBottom>\n                                Rankings:\n                            </Typography>\n                            <Typography variant=\"body2\" component=\"p\">\n                                1. {lb[0].name}\n                                <br/>\n                                2. {lb[1] ? lb[1].name : \" \"}\n                                <br/>\n                                3. {lb[2] ? lb[2].name : \" \"}\n\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Paper>\n\n        );\n    };\n\n    genMeasureList = () => {\n        let data = [];\n        if (this.state.measures.length === 0) {\n            data.push(this.renderEmptyMeasureListItem())\n        } else {\n            this.state.measures.forEach(measure => data.push(this.renderMeasureListItem(measure)))\n        }\n        return data\n    };\n\n\n    render() {\n        let measureDataForDisplay = this.genMeasureList();\n        if (this.state.go_back) {\n            return (\n                < Redirect to={{pathname: \"/home\", state: {user: this.state.user_obj}}}/>\n            )\n        } else if (this.state.go_to_measure) {\n            return (\n                <Measure measure_name={this.state.select_measure_name}\n                         measure_id={this.state.select_measure_id}\n                         measure_obj={this.state.select_measure_obj}\n                         user_obj={this.state.user_obj}\n                         bunker_id={this.state.bunker._id}\n                         users_for_bunker={this.state.users_for_bunker}\n                         past_users_for_bunker={this.state.past_users_for_bunker}\n                         buildLeaderboard={this.buildLeaderboard}\n                         theme={this.state.theme}\n                />\n            )\n        } else {\n            return (\n                <div className=\"full-height\" style={{\n                    backgroundColor: '#EB4D55',\n                    backgroundSize: \"cover\",\n                    position: 'absolute',\n                    minHeight: '100%',\n                    minWidth: '100%'\n                }}>\n                    <ThemeProvider\n                        theme={createMuiTheme(this.state.theme)}>\n                        <SUI_Grid divided='vertically'>\n                            <SUI_Grid.Row columns={1}>\n                                <Container>\n                                    <Menu fixed='top' inverted borderless>\n                                        <Container>\n                                            <Menu.Item position={\"left\"}>\n                                                <Dropdown item icon='arrow circle left' simple>\n                                                    <Dropdown.Menu style={{background: \"#5c5c5c\"}}>\n                                                        <Dropdown.Item>\n                                                            <Typography onClick={this.setGoBack}\n                                                                        variant={'button'}\n                                                                        color={'textPrimary'}\n                                                            >\n                                                                Back to home\n                                                            </Typography>\n                                                        </Dropdown.Item>\n                                                        <Dropdown.Item>\n                                                            <LogoutButton/>\n                                                        </Dropdown.Item>\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n                                            </Menu.Item>\n                                            <Menu.Item header>\n                                                <Typography variant={'h4'}>\n                                                    {this.state.bunker_name}\n                                                </Typography>\n\n                                            </Menu.Item>\n\n                                            <Menu.Item position={\"right\"}>\n                                                <Dropdown item icon='align justify' position={'right'} simple>\n                                                    <Dropdown.Menu style={{background: \"#5c5c5c\"}}>\n                                                        <Dropdown.Item>\n                                                            <Typography\n                                                                onClick={() => this.setState({adding_measure: true})}\n                                                                variant={'button'}\n                                                                color={'textPrimary'}\n                                                            >\n                                                                <Icon name='add'/>Add Measure...\n                                                            </Typography>\n                                                        </Dropdown.Item>\n                                                        <Dropdown.Item>\n                                                            <Typography\n                                                                onClick={() => this.setState({inviting_others: true})}\n                                                                variant={'button'}\n                                                                color={'textPrimary'}\n                                                            >\n                                                                <Icon name='add'/>Invite Others...\n                                                            </Typography>\n                                                        </Dropdown.Item>\n\n                                                        <Dialog open={this.state.adding_measure}\n                                                                onClose={() => this.setState({adding_measure: false})}\n                                                                aria-labelledby=\"add-measure-title\"\n                                                                aria-describedby=\"add-measure-description\"\n                                                        >\n                                                            <DialogTitle\n                                                                id='add-measure-title'>{\"Add a measure\"}</DialogTitle>\n                                                            <DialogContent>\n                                                                <DialogContentText id='add-measure-description'>\n                                                                    Create a new measure to start ranking the survivors\n                                                                    in your bunker!\n                                                                </DialogContentText>\n                                                                <TextField\n                                                                    autoFocus\n                                                                    margin=\"dense\"\n                                                                    id=\"name\"\n                                                                    label=\"Measure name\"\n                                                                    type='text'\n                                                                    fullWidth\n                                                                    color={'secondary'}\n                                                                    onChange={(event) => this.__onCreateMeasureNameFormChange(event.target.value)}\n                                                                />\n                                                            </DialogContent>\n                                                            <DialogActions>\n                                                                <Button onClick={this.__onAddMeasureClick}>\n                                                                    Create\n                                                                </Button>\n                                                            </DialogActions>\n                                                        </Dialog>\n                                                        <Dialog open={this.state.inviting_others}\n                                                                onClose={() => this.setState({inviting_others: false})}\n                                                                aria-labelledby='inviting-others-title'\n                                                                aria-describedby='inviting-others-description'\n                                                        >\n                                                            <DialogTitle id='inviting-others-title'>Invite\n                                                                Others</DialogTitle>\n                                                            <DialogContent>\n                                                                <DialogContentText id='inviting-others-description'>\n                                                                    Copy and send the access code below to your friends\n                                                                    so\n                                                                    they can join you in your bunker and help you\n                                                                    survive!\n                                                                </DialogContentText>\n                                                                <Typography color={'secondary'} variant={'h5'}\n                                                                            align={'center'}><b>{this.state.bunker._id}</b></Typography>\n                                                            </DialogContent>\n                                                            <DialogActions>\n                                                                <Button\n                                                                    onClick={() => this.setState({inviting_others: false})}>\n                                                                    Done\n                                                                </Button>\n                                                            </DialogActions>\n                                                        </Dialog>\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n                                            </Menu.Item>\n                                        </Container>\n                                    </Menu>\n                                </Container>\n                            </SUI_Grid.Row>\n                            <SUI_Grid.Row columns={1}>\n                                <MUI_Grid container spacing={5} style={{marginTop: '48px'}} direction={\"row\"}>\n                                    <MUI_Grid item xs={12}>\n                                        <MUI_Grid container justify=\"center\" spacing={4}>\n                                            {measureDataForDisplay.map(value => (\n                                                <MUI_Grid item>\n                                                    {value}\n                                                </MUI_Grid>\n                                            ))}\n                                        </MUI_Grid>\n                                    </MUI_Grid>\n                                </MUI_Grid>\n                                {/*</Container>*/}\n                            </SUI_Grid.Row>\n                        </SUI_Grid>\n                    </ThemeProvider>\n                </div>\n            )\n        }\n    }\n\n}\n\nexport default Bunker","import React from 'react'\nimport {Button, Form, Grid, Header, Image, Message, Segment, Icon, Modal, Text} from 'semantic-ui-react'\nimport {useAuth0} from \"../react-auth0-spa\";\nimport Typography from \"@material-ui/core/Typography\";\nimport BlurOnIcon from '@material-ui/icons/BlurOn';\n\nconst StartPage = () => {\n    const {isAuthenticated, loginWithRedirect, logout} = useAuth0();\n\n    if (isAuthenticated) {\n        loginWithRedirect();\n    }\n    return (\n        <div>\n            <Grid textAlign='center' style={{height: '100vh'}} verticalAlign='middle'>\n                <Grid.Column style={{maxWidth: 450}}>\n                    <Header as='h2' color='#73031D' textAlign='center'>\n                        <BlurOnIcon fontSize=\"large\"/> <Typography variant={\"h2\"} style={{color: \"#73031D\"}}> Welcome to Corona Count! </Typography>\n                    </Header>\n                    <Form size='large'>\n                        <Segment >\n                            {!isAuthenticated && (\n                                <Button color='#73031D' fluid size='large' onClick={() => loginWithRedirect({})}>Get\n                                    Started!</Button>\n                            )}\n\n                            {isAuthenticated && (\n                                <Button color='#73031D' fluid size='large' onClick={() => logout()}>Log out</Button>\n                            )}\n                        </Segment>\n                    </Form>\n                </Grid.Column>\n            </Grid>\n        </div>\n    );\n};\n\n\nexport default StartPage","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n// eslint-disable-next-line\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home.js'\nimport RetrieveProfileGoHome from \"./Hooks/RetrieveProfileGoHome\";\nimport Login from './components/Login.js'\nimport Bunker from \"./components/Bunker\";\nimport {useAuth0} from \"./react-auth0-spa\";\nimport StartPage from \"./components/StartPage\";\nimport Redirect from \"react-router-dom/es/Redirect\";\n\n\nfunction App() {\n    const {isAuthenticated, loading} = useAuth0();\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <Route path='/home' render={(props) => (isAuthenticated ? <RetrieveProfileGoHome {...props}/> :\n                        < Redirect to={\"/start\"}/>)}/>\n                    <Route path='/login'\n                           render={(props) => (isAuthenticated ? <Login {...props}/> : < Redirect to={\"/start\"}/>)}/>\n                    <Route path='/start' render={(props) => <StartPage {...props}/>}/>\n                    <Route path='/bunker'\n                           render={(props) => (isAuthenticated ? <Bunker {...props}/> : < Redirect to={\"/start\"}/>)}/>\n                </Switch>\n            </div>\n        </Router>\n    );\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// src/utils/history.js\n\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// //TODO: Note that the redirect_uri below is where you set the redirect location for AFTER you've been authenticated\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri=\"http://localhost:3000/home\"//{window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}